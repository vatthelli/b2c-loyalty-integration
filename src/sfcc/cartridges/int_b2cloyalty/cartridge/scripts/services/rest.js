// TODO: CHANGES FROM THIS FILE SHOULD BE MERGED INTO B2C_CRM_SYNC!
'use strict';

/**
 * @module services/rest
 */

/**
 * @type {dw/system/Log}
 */
var LOGGER = require('dw/system/Logger').getLogger('int_b2ccrmsync', 'rest');

/**
 * @description Inserts the cached authToken into request header for each subsequent REST API service
 * call (we don't share credentials with every request; instead -- we leverage the authToken).
 *
 * @param {dw.svc.HTTPService} svc Represents the service definition to invoke.
 * @param {String} endpoint Represents the endpoint to call
 * @param {Boolean} bypassCache If true, then the authentication token will be retrieved from the
 * Salesforce Platform, not from the cache
 *
 * @throws {Error} Throws error when no valid auth token is available (i.e.- service error, service down)
 */
function setAuthHeader(svc, endpoint, bypassCache) {

    /**
     * @typedef  {Object} token
     * @description Represents the tokenObject provided by the Salesforce Platform
     * @property {String} token_type Describes the type of authToken as defined by the source system
     * @property {String} access_token Represents the tokenValue generated by the source system
     * @property {String} instance_url Describes the url of the source-system from which an authToken was generated
     */

    //TODO: Line below has been changed
    var token = require('*/cartridge/scripts/models/authToken').getValidToken(bypassCache);
    svc.setAuthentication('NONE');
    svc.addHeader('Authorization', require('dw/util/StringUtils').format('{0} {1}', token.token_type, token.access_token));
    svc.setURL(require('dw/util/StringUtils').format('{0}/{1}', token.instance_url, endpoint));
}

/**
 * @description Returns the service callback for the create and update actions against the REST API
 *
 * @param {String} model The model to apply to the REST API call
 * @param {String} operation The operation to perform against the REST API
 * @param {Boolean} bypassCache If true, then the authentication token will be retrieved from the
 * Salesforce Platform, not from the cache.
 * @returns {Object} Returns the service callback function(s) used to interact
 * with the defined REST API
 */
function serviceCallback(model, operation, bypassCache) {
    return {
        createRequest: function (svc, body) {
            //TODO: Line below has been changed
            setAuthHeader(svc, require('*/cartridge/scripts/b2ccrmsync.config').endpoints[model][operation], bypassCache);
            svc.addHeader('Content-Type', 'application/json');
            return body;
        },
        parseResponse: function parseResponse(svc, client) {
            //TODO: Line below has been changed
            return require('*/cartridge/scripts/util/helpers').expandJSON(client.text, client.text);
        },
        mockFull: function () {
            return require(require('dw/util/StringUtils').format('./mocks/{0}.{1}', model, operation));
        },
        getRequestLogMessage: function (request) {
            LOGGER.debug(JSON.stringify(request));
        },
        getResponseLogMessage: function (response) {
            LOGGER.debug(JSON.stringify(response.getText()));
        }
    };
}

/**
 * @description Returns the service callback for the given {model} and {state}.
 *
 * @param {String} model The model to apply to the REST API call
 * @param {String} operation The operation to perform against the REST API
 * @param {Boolean} bypassCache If true, then the authentication token will be retrieved from the Salesforce Platform, not from the cache
 *
 * @return {dw/svc/ServiceCallback} The service callback to use while initializing the service
 */
function getServiceCallback(model, operation, bypassCache) {
    //TODO: Line below has been changed
    var endpoints = require('*/cartridge/scripts/b2ccrmsync.config').endpoints;
    if (!endpoints[model] || !endpoints[model][operation]) {
        throw new Error(require('dw/util/StringUtils').format('Unknown endpoint for the given model "{0}" and operation "{1}"', model, operation));
    }
    return serviceCallback(model, operation, bypassCache);
}

module.exports.getServiceCallback = getServiceCallback;
